	org	0xD000
;=======================================================================
; 8253 簡易サウンドドライバテストプログラム V2 [ 最適化済 ]
; Tokihiro Naito 2020/11/27
;=======================================================================
	jp	Main

;-----------------------------------------------------------------------
; メイン
;
Main:
	; ドライバの初期化
	call	SNDInitialize

	; メインループ
.repeat	ld	hl, BGM
	call	SNDMusicStart	; 音楽を鳴らす
.loop	call	SNDDiver	; サウンドドライバ呼び出し

	; 効果音発音テスト
.effect	in	a, (0x01)
	and	%10000000	; RETUENキーが
	jr	nz, .endchk	; 押されていないなら次に
	ld	hl, SE		; HL 効果音アドレス
	call	SNDEffectStart	; 効果音を発生させる
.endchk	in	a, (0x04)	; [Q]キーが
	and	%00000010	; 押されていたら
	jr	z, .end		; 終了処理に
	call	SNDIsPlaying	; 音楽演奏中確認
	jp	nz, .loop	; 演奏中ならそのままループ
	jp	.repeat		; 音楽を再演奏させる

	; 終了処理
.end	call	SNDStop		; 発音停止
.qoff	in	a, (0x04)	; [Q]キーが
	and	%00000010	; 押されていたら
	jr	z, .qoff	; 無限ループ
	jp	0x5C66		; 終了する

#LIB SND_PLAY
;-----------------------------------------------------------------------
; 音楽を鳴らす
; HL = BGMデータアドレス
;
SNDMusicStart:
	ld	(.retads), sp
	ld	sp, SND.CHEnd
	ld	de, 0x0800	; 音長初期値 8

	; CH3
	ld	c, (hl)
	inc	hl
	ld	b, (hl)		; BC CH3 MML アドレス
	inc	hl
	push	bc		; CH3 + MML.REPEAT
	push	de		; CH3 + MML.LENGTH
	push	bc		; CH3 + MML.ADDRESS
	push	de		; CH2 + MML.FREQ (dummy)

	; CH2
	ld	c, (hl)
	inc	hl
	ld	b, (hl)		; BC CH2 MML アドレス
	inc	hl
	push	bc		; CH2 + MML.REPEAT
	push	de		; CH2 + MML.LENGTH
	push	bc		; CH2 + MML.ADDRESS
	push	de		; CH2 + MML.FREQ (dummy)

	; CH1
	ld	c, (hl)
	inc	hl
	ld	b, (hl)		; BC CH1 MML アドレス
	push	bc		; CH1 + MML.REPEAT
	push	de		; CH1 + MML.LENGTH
	push	bc		; CH1 + MML.ADDRESS

.retads	equ	$ + 1
	ld	sp, 0		; SP を元に戻して
	ret			; 終了する
#ENDLIB

#LIB SND_SEPLAY
;-----------------------------------------------------------------------
; 効果音を鳴らす
; HL = 効果音データアドレス
;
SNDEffectStart:
	ld	(SND.SE + MML.ADDRESS), hl
	ld	hl, 0x0100	; 音長初期値 1
	ld	(SND.SE + MML.LENGTH), hl
	ld	h, l
	ld	(SND.SE + MML.FREQ), hl
	ret
#ENDLIB

#LIB SND_STOP
SNDStop:
#ENDLIB

#LIB SND_INIT
;-----------------------------------------------------------------------
; 音を止める
;
SNDInitialize:
	xor	a
	out	(0x02), a	; キーオンフラグを全停止する
	ld	hl, 0
	ld	(.retads), sp
	ld	sp, SND.CH1 + MML.ADDRESS + 2
	push	hl
	ld	sp, SND.CH2 + MML.ADDRESS + 2
	push	hl
	ld	sp, SND.CH3 + MML.ADDRESS + 2
	push	hl
	ld	sp, SND.SE  + MML.ADDRESS + 2
	push	hl
.retads	equ	$ + 1
	ld	sp, 0		; SP を元に戻して
	ret			; 終了する
#ENDLIB


#LIB SND_ISPLAYING
;-----------------------------------------------------------------------
; 音楽が演奏されているか
; out: ZF=1 停止している
;
SNDIsPlaying:
	ld	hl, (SND.CH1 + MML.ADDRESS)
	ld	a, h
	or	l
	ld	hl, (SND.CH2 + MML.ADDRESS)
	ld	a, h
	or	l
	ld	hl, (SND.CH3 + MML.ADDRESS)
	ld	a, h
	or	l
	ret
#ENDLIB

#LIB SND_PROC
;-----------------------------------------------------------------------
; サウンドドライバエントリ
;
SNDTimer:
	; 全ての使用レジスタを保存して復帰する
	push	hl
	push	de
	push	bc
	push	af
	call	.exec
	pop	af
	pop	bc
	pop	de
	pop	hl
	ret

	; 汎用タイマー更新
.exec	ld	hl, SND.Counter
	inc	(hl)

	; チャンネル別更新
	ld	hl, SND.CH1 + MML.ADDRESS
	call	SNDPlayer
	ld	hl, SND.CH2 + MML.ADDRESS
	call	SNDPlayer
	ld	hl, SND.CH3 + MML.ADDRESS
	call	SNDPlayer
	ld	hl, SND.SE + MML.ADDRESS
	call	SNDPlayer

	; 発音する
	ld	hl, (SND.CH1 + MML.FREQ)
	ld	bc, SNDWRT.@1 * 256 + SNDCH.@1
	call	SNDOutput
	ld	hl, (SND.CH2 + MML.FREQ)
	ld	bc, SNDWRT.@2 * 256 + SNDCH.@2
	call	SNDOutput
	ld	hl, (SND.SE + MML.FREQ)
	ld	bc, SNDWRT.@3 * 256 + SNDCH.@3
	ld	a, h
	or	l
	jr	nz, .outpt
	ld	hl, (SND.CH3 + MML.FREQ)
.outpt	call	SNDOutput
	ld	a, KEYON.All
	out	(0x02), a	; キーオンフラグを全解放する
	ret
#ENDLIB

#LIB SND_COMMON


ALIGN 256
;
; 発音カウンタ値テーブル 256境界保証
;
FRQTBL:
	dw	0xEE80, 0xE11D, 0xD47B, 0xC88D, 0xBD4C, 0xB2AC
	dw	0xA8A5, 0x9F2E, 0x963F, 0x8DD0, 0x85DA, 0x7E57
	dw	0x7740, 0x708F, 0x6A3D, 0x6447, 0x5EA6, 0x5956
	dw	0x5453, 0x4F97, 0x4B1F, 0x46E8, 0x42ED, 0x3F2C
	dw	0x3BA0, 0x3847, 0x351F, 0x3223, 0x2F53, 0x2CAB
	dw	0x2A29, 0x27CB, 0x2590, 0x2374, 0x2177, 0x1F96
	dw	0x1DD0, 0x1C24, 0x1A8F, 0x1912, 0x17AA, 0x1656
	dw	0x1515, 0x13E6, 0x12C8, 0x11BA, 0x10BB, 0x0FCB
	dw	0x0EE8, 0x0E12, 0x0D48, 0x0C89, 0x0BD5, 0x0B2B
	dw	0x0A8A, 0x09F3, 0x0964, 0x08DD, 0x085E, 0x07E5
	dw	0x0774, 0x0709, 0x06A4, 0x0644, 0x05EA, 0x0595
	dw	0x0545, 0x04F9, 0x04B2, 0x046F, 0x042F, 0x03F3

;-----------------------------------------------------------------------
; カウンタ値を出力する
; B  = カウンタ値設定開始ビット
; C  = SNDCH 出力ポート
; HL = 実際に出力するカウンタ値
;
SNDOutput:
	ld	a, b
	out	(0x0F), a
	nop
	out	(c), l
	nop
	out	(c), h
	ret

;-----------------------------------------------------------------------
; チャンネル別更新処理（ドライバ内部呼び出し専用）
; HL = ワーク先頭アドレス（ + MML.ADDRESS）
;
SNDPlayer:
	ld	(.retads), sp
	ld	sp, hl			; SP = +2 MML.ADDRES

	; アドレスがなければ終了
	pop	de			; SP = +4 MML.LENGTH
	ld	a, d			; DE MMLデータポインタ
	or	e
	jr	z, .exit		; データが無ければ終了する

	; 発音継続確認
	pop	hl			; H = 初期音長, L = 現音長
	dec	l			; 現在の音長 -1
	jp	m, .cmd			; マイナスならコマンド解析
	push	hl			; 音長を保存
	jr	nz, .exit		; 音長最後で無ければ終了
	push	de			; dummy
	ld	h, l			; HL = 0
	push	hl			; MML.FREQ をゼロに

	; SNDTimer に戻る
.retads	equ	$ + 1
.exit	ld	sp, 0			; SP を元に戻して
	ret				; 終了する

	; 終了
.stop	ld	hl, 0
	push	hl			; MML.LENGTH = 0
	push	hl			; ADDRESS = 0
	jr	.exit			; 終了する

	; 音長
.length	neg				; 符号反転
	ld	h, a			; 初期音長を更新

	; MMLコマンド解析
.cmd	ld	a, (de)			; Acc コマンド
	inc	de			; DE 次のアドレスに
	cp	0x80			; 終了コードで比較
	jr	z, .stop		; ZF=1 なら終了
	jp	nc, .length		; マイナス値なら音長

	; 音階
	ld	l, h			; 音長を初期化
	push	hl			; 音長を保存
	push	de			; MMLポインタを保存
	add	a, a			; カウンタ連番を2倍して
	add	a, FRQTBL % 256		; テーブル下位8bit加算
	ld	l, a
	ld	h, FRQTBL / 256		; HL カウンタ値の位置
	ld	a, (hl)
	inc	l
	ld	h, (hl)
	ld	l, a			; HL カウンタ値
	push	hl			; MML.FREQ に保存
	jr	.exit


;-----------------------------------------------------------------------
; 音階定義
;
TONE:
.C	equ	0
.CP	equ	1
.D	equ	2
.DP	equ	3
.E	equ	4
.F	equ	5
.FP	equ	6
.G	equ	7
.GP	equ	8
.A	equ	9
.AP	equ	10
.B	equ	11

.O1	equ	(0 * 12)
.O2	equ	(1 * 12)
.O3	equ	(2 * 12)
.O4	equ	(3 * 12)
.O5	equ	(4 * 12)
.O6	equ	(5 * 12)

;-----------------------------------------------------------------------
; 発音制御フラグ
;
KEYON:	; キーオンフラグ out(0x02) に出力する
.@1	equ	%00001000	; ch.1
.@2	equ	%01000000	; ch.2
.@3	equ	%10000000	; ch.3
.All	equ	(.@1 | .@2 | .@3)

SNDCH:	; チャンネル毎のカウント値設定ポート番号
.@1	equ	%00001100	; ch.1
.@2	equ	%00001101	; ch.2
.@3	equ	%00001110	; ch.3

SNDWRT:	; カウンタ値出力開始フラグ 下位／上位
.@1	equ	%00110110	; ch.1
.@2	equ	%01110110	; ch.2
.@3	equ	%10110110	; ch.3

;-----------------------------------------------------------------------
; ワークエリア
;
MML:
.FREQ		equ	0		; 2 発音周波数
.ADDRESS	equ	2		; 2 MMLデータアドレス
.LENGTH		equ	4		; 1 現在の音長カウンタ
.LENDATA	equ	5		; 1 音長初期値
.REPEAT		equ	6		; 2 MMLデータ初期アドレス
.SIZE		equ	8		; チャンネルデータサイズ

	org     ($ + 1) / 2 * 2		; 偶数アライメント
SND:
.Counter	ds	1		; 汎用カウンタ
.Repeat		ds	1		; BGMリピート再生フラグ
.CH1		ds	MML.SIZE	; 1ch
.CH2		ds	MML.SIZE	; 2ch
.CH3		ds	MML.SIZE	; 3ch
.CHEnd		equ	$		; CH最後尾
.SE		ds	MML.SIZE	; SE
.BLANKFLG	ds	1		; 垂直帰線位置フラグ

#ENDLIB

#LIB SND_SYNC
;-----------------------------------------------------------------------
; 垂直帰線が裏に入ったら音を鳴らす
;
SNDDiver:
	push	af
	ld	a, (SND.BLANKFLG)
	or	a
	jr	nz, .chkF

	; 垂直帰線が裏にいる
	in	a, (0x40)
	and	%00100000
	ld	(SND.BLANKFLG), a
	pop	af
	ret

	; 垂直帰線が表にいる
.chkF	in	a, (0x40)
	and	%00100000
	ld	(SND.BLANKFLG), a
	call	z, SNDTimer	; 裏から表に変わったので呼び出す
	pop	af
	ret
#ENDLIB

;-----------------------------------------------------------------------
; サンプルデータ
;
BGM:	dw	.@3, .@2, .@1
.@1	db	-16, TONE.O4 + TONE.G
	db	TONE.O4 + TONE.E
	db	-32, TONE.O4 + TONE.E	; 64 ちょうちょ〜

	db	-16, TONE.O4 + TONE.G
	db	TONE.O4 + TONE.E
	db	-32, TONE.O4 + TONE.E	; 64 ちょうちょ〜

	db	-16, TONE.O4 + TONE.C
	db	TONE.O4 + TONE.D
	db	TONE.O4 + TONE.E
	db	TONE.O4 + TONE.F	; 64 なのはに

	db	-16, TONE.O4 + TONE.G
	db	-16, TONE.O4 + TONE.G
	db	-32, TONE.O4 + TONE.G	; 64 とまれ〜

	db	0x80

.@2	db	-8
	db	TONE.O2 + TONE.D
	db	TONE.O2 + TONE.D
	db	TONE.O2 + TONE.D
	db	TONE.O2 + TONE.D
	db	TONE.O2 + TONE.D
	db	TONE.O2 + TONE.D
	db	TONE.O2 + TONE.D
	db	TONE.O2 + TONE.D	; 64

	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F	; 64

	db	TONE.O2 + TONE.G
	db	TONE.O2 + TONE.G
	db	TONE.O2 + TONE.G
	db	TONE.O2 + TONE.G
	db	TONE.O2 + TONE.G
	db	TONE.O2 + TONE.G
	db	TONE.O2 + TONE.G
	db	TONE.O2 + TONE.G	; 64

	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F
	db	TONE.O2 + TONE.F	; 64

	db	0x80

.@3	db	-16, TONE.O5 + TONE.G
	db	TONE.O5 + TONE.E
	db	-32, TONE.O5 + TONE.E

	db	-16, TONE.O5 + TONE.G
	db	TONE.O5 + TONE.E
	db	-32, TONE.O5 + TONE.E

	db	-16, TONE.O5 + TONE.C
	db	TONE.O5 + TONE.D
	db	TONE.O5 + TONE.E
	db	TONE.O5 + TONE.F

	db	-16, TONE.O5 + TONE.G
	db	-16, TONE.O5 + TONE.G
	db	-32, TONE.O5 + TONE.G

	db	0x80

; o4l48dg>cfb>e
SE:	db	0
	db	TONE.O4 + TONE.D
	db	TONE.O4 + TONE.G
	db	TONE.O3 + TONE.C
	db	TONE.O3 + TONE.F
	db	TONE.O3 + TONE.B
	db	TONE.O2 + TONE.E
	db	0x80
